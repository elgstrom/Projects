{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/Netgain/netgain-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Process_timeline.tsx\";\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepContent from \"@material-ui/core/StepContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { process_instance_update_step, process_instance_update_activity_state } from \"../backend/ts/database\";\nimport { StepButton } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    width: \"30%\"\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2)\n  },\n  resetContainer: {\n    padding: theme.spacing(3)\n  },\n  completed: {\n    display: \"inline-block\"\n  }\n}));\n//TODO maybe just use higher component state for active step?\nexport default function VerticalLinearStepper(props) {\n  const classes = useStyles({}); //init active step to props.process.step\n\n  const _React$useState = React.useState(props.process.activeStep),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        activeStep = _React$useState2[0],\n        setActiveStep = _React$useState2[1];\n\n  const _React$useState3 = React.useState(props.process.activities.map(a => !!(a.state >= 0))),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        completed = _React$useState4[0],\n        setCompleted = _React$useState4[1];\n\n  const amountOfSteps = props.process.activities.length;\n\n  const update_step_counter = current_step => {\n    process_instance_update_step(props.process, current_step);\n  };\n\n  const getStepContent = step => {\n    return props.process.activities[step].description;\n  };\n\n  const handleNext = () => {\n    update_step_counter(activeStep + 1);\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleReset = () => {\n    update_step_counter(0);\n    setActiveStep(0);\n    setCompleted({});\n\n    for (let A of props.process.activities) {\n      process_instance_update_activity_state(props.process, A, -1);\n    }\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n    process_instance_update_activity_state(props.process, props.process.activities[activeStep], 0);\n  };\n\n  const handleStep = step => () => {\n    update_step_counter(step);\n    setActiveStep(step);\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Stepper, {\n    nonLinear: true,\n    activeStep: activeStep,\n    orientation: \"vertical\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, props.process.activities.map((activity, index) => React.createElement(Step, {\n    key: activity.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(StepButton, {\n    onClick: handleStep(index),\n    completed: completed[index],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, activity.title), React.createElement(StepContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, getStepContent(index)), React.createElement(\"div\", {\n    className: classes.actionsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, activeStep !== props.process.activities.length && (completed[activeStep] ? React.createElement(Typography, {\n    variant: \"caption\",\n    className: classes.completed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Step \", activeStep + 1, \" already completed\") : activity.possible_states.map((state, index) => React.createElement(\"div\", {\n    key: \"state_button_\".concat(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleComplete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, state))))))))), activeStep === amountOfSteps && React.createElement(Paper, {\n    square: true,\n    elevation: 0,\n    className: classes.resetContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Alla steg \\xE4r avklarade, bra jobbat\"), React.createElement(Button, {\n    onClick: handleReset,\n    className: classes.button,\n    variant: \"contained\",\n    style: {\n      backgroundColor: \"#33cc33\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"\\xC5terst\\xE4ll\")));\n}","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Process_timeline.tsx"],"names":["React","makeStyles","createStyles","Stepper","Step","StepContent","Button","Paper","Typography","process_instance_update_step","process_instance_update_activity_state","StepButton","useStyles","theme","root","width","button","marginTop","spacing","marginRight","actionsContainer","marginBottom","resetContainer","padding","completed","display","VerticalLinearStepper","props","classes","useState","process","activeStep","setActiveStep","activities","map","a","state","setCompleted","amountOfSteps","length","update_step_counter","current_step","getStepContent","step","description","handleNext","prevActiveStep","handleReset","A","handleComplete","newCompleted","handleStep","completedSteps","Object","keys","activity","index","title","possible_states","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepContent from \"@material-ui/core/StepContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { ProcessInstance, ActivityInstance } from \"../backend/ts/common_define\";\nimport {\n  process_instance_update_step,\n  process_instance_update_activity_state\n} from \"../backend/ts/database\";\nimport { StepButton } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"30%\"\n    },\n    button: {\n      marginTop: theme.spacing(1),\n      marginRight: theme.spacing(1)\n    },\n    actionsContainer: {\n      marginBottom: theme.spacing(2)\n    },\n    resetContainer: {\n      padding: theme.spacing(3)\n    },\n    completed: {\n      display: \"inline-block\"\n    }\n  })\n);\n\ninterface Line_Stepper_Props {\n  process: ProcessInstance;\n}\n//TODO maybe just use higher component state for active step?\nexport default function VerticalLinearStepper(props: Line_Stepper_Props) {\n  const classes = useStyles({});\n  //init active step to props.process.step\n  const [activeStep, setActiveStep] = React.useState(props.process.activeStep);\n  const [completed, setCompleted] = React.useState<{ [k: number]: boolean }>(\n    props.process.activities.map(a => !!(a.state >= 0))\n  );\n  const amountOfSteps = props.process.activities.length;\n\n  const update_step_counter = (current_step: number) => {\n    process_instance_update_step(props.process, current_step);\n  };\n\n  const getStepContent = (step: number) => {\n    return props.process.activities[step].description;\n  };\n\n  const handleNext = () => {\n    update_step_counter(activeStep + 1);\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleReset = () => {\n    update_step_counter(0);\n    setActiveStep(0);\n    setCompleted({});\n    for (let A of props.process.activities) {\n      process_instance_update_activity_state(props.process, A, -1);\n    }\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n    process_instance_update_activity_state(\n      props.process,\n      props.process.activities[activeStep],\n      0\n    );\n  };\n\n  const handleStep = (step: number) => () => {\n    update_step_counter(step);\n    setActiveStep(step);\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  return (\n    <div className={classes.root}>\n      <Stepper nonLinear activeStep={activeStep} orientation=\"vertical\">\n        {props.process.activities.map((activity, index) => (\n          <Step key={activity.title}>\n            <StepButton\n              onClick={handleStep(index)}\n              completed={completed[index]}\n            >\n              {activity.title}\n            </StepButton>\n\n            <StepContent>\n              <Typography>{getStepContent(index)}</Typography>\n              <div className={classes.actionsContainer}>\n                {activeStep !== props.process.activities.length &&\n                  (completed[activeStep] ? (\n                    <Typography variant=\"caption\" className={classes.completed}>\n                      Step {activeStep + 1} already completed\n                    </Typography>\n                  ) : (\n                    activity.possible_states.map((state, index) => (\n                      <div key={`state_button_${index}`}>\n                        <Button\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={handleComplete}\n                        >\n                          {state}\n                        </Button>\n                      </div>\n                    ))\n                  ))}\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n      {activeStep === amountOfSteps && (\n        <Paper square elevation={0} className={classes.resetContainer}>\n          <Typography>Alla steg är avklarade, bra jobbat</Typography>\n          <Button\n            onClick={handleReset}\n            className={classes.button}\n            variant=\"contained\"\n            style={{ backgroundColor: \"#33cc33\" }}\n          >\n            Återställ\n          </Button>\n        </Paper>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}