{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/Netgain/netgain-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Get_Process_Info_Modal.tsx\";\nimport React from \"react\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\nimport { IconButton, makeStyles, createStyles, Popover, Typography, Box } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => createStyles({\n  typography: {\n    padding: theme.spacing(2),\n    maxWidth: 700,\n    wordWrap: \"break-word\"\n  }\n}));\nexport default function SimplePopover({\n  process\n}) {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(null),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        anchorEl = _React$useState2[0],\n        setAnchorEl = _React$useState2[1];\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? \"simple-popover\" : undefined;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    \"aria-describedby\": id,\n    color: \"default\",\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(InfoOutlinedIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(Popover, {\n    id: id,\n    open: open,\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"center\"\n    },\n    transformOrigin: {\n      vertical: \"top\",\n      horizontal: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.typography,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Title: \", process.title, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), \"Description: \", process.description, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), \"Author: \", process.author, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), \"Created: \", process.created_date.toLocaleString(), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), \"Activities:\"), process.activities.map((a, index) => React.createElement(Box, {\n    style: {\n      marginLeft: \"2em\"\n    },\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Title: \", a.title, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), \"Description: \", a.description, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), \"Outcome: \", a.possible_states.join(\"/\"), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })))));\n}","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Get_Process_Info_Modal.tsx"],"names":["React","InfoOutlinedIcon","IconButton","makeStyles","createStyles","Popover","Typography","Box","useStyles","theme","typography","padding","spacing","maxWidth","wordWrap","SimplePopover","process","classes","useState","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","open","Boolean","id","undefined","vertical","horizontal","title","description","author","created_date","toLocaleString","activities","map","a","index","marginLeft","possible_states","join"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,SACEC,UADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,OAJF,EAKEC,UALF,EAOEC,GAPF,QAQO,mBARP;AAcA,MAAMC,SAAS,GAAGL,UAAU,CAAEM,KAAD,IAC3BL,YAAY,CAAC;AACXM,EAAAA,UAAU,EAAE;AACVC,IAAAA,OAAO,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADC;AAEVC,IAAAA,QAAQ,EAAE,GAFA;AAGVC,IAAAA,QAAQ,EAAE;AAHA;AADD,CAAD,CADc,CAA5B;AAUA,eAAe,SAASC,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAA4D;AACzE,QAAMC,OAAO,GAAGT,SAAS,EAAzB;;AADyE,0BAEzCR,KAAK,CAACkB,QAAN,CAC9B,IAD8B,CAFyC;AAAA;AAAA,QAElEC,QAFkE;AAAA,QAExDC,WAFwD;;AAKzE,QAAMC,WAAW,GAAIC,KAAD,IAAgD;AAClEF,IAAAA,WAAW,CAACE,KAAK,CAACC,aAAP,CAAX;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACxBJ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAFD;;AAIA,QAAMK,IAAI,GAAGC,OAAO,CAACP,QAAD,CAApB;AACA,QAAMQ,EAAE,GAAGF,IAAI,GAAG,gBAAH,GAAsBG,SAArC;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,wBAAkBD,EAA9B;AAAkC,IAAA,KAAK,EAAC,SAAxC;AAAkD,IAAA,OAAO,EAAEN,WAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,oBAAC,OAAD;AACE,IAAA,EAAE,EAAEM,EADN;AAEE,IAAA,IAAI,EAAEF,IAFR;AAGE,IAAA,QAAQ,EAAEN,QAHZ;AAIE,IAAA,OAAO,EAAEK,WAJX;AAKE,IAAA,YAAY,EAAE;AACZK,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,UAAU,EAAE;AAFA,KALhB;AASE,IAAA,eAAe,EAAE;AACfD,MAAAA,QAAQ,EAAE,KADK;AAEfC,MAAAA,UAAU,EAAE;AAFG,KATnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEb,OAAO,CAACP,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUM,OAAO,CAACe,KADlB,OACyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADzB,mBAEgBf,OAAO,CAACgB,WAFxB,OAEqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFrC,cAGWhB,OAAO,CAACiB,MAHnB,OAG2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAH3B,eAIYjB,OAAO,CAACkB,YAAR,CAAqBC,cAArB,EAJZ,OAImD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJnD,OAI0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJ1D,gBAdF,EAqBGnB,OAAO,CAACoB,UAAR,CAAmBC,GAAnB,CAAuB,CAACC,CAAD,EAAIC,KAAJ,KACtB,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAZ;AAAmC,IAAA,GAAG,EAAED,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUD,CAAC,CAACP,KADZ,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,mBAGgBO,CAAC,CAACN,WAHlB,OAG+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAH/B,eAIYM,CAAC,CAACG,eAAF,CAAkBC,IAAlB,CAAuB,GAAvB,CAJZ,OAIyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJzC,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADD,CArBH,CAJF,CADF;AAsCD","sourcesContent":["import React from \"react\";\nimport { Process } from \"../backend/ts/common_define\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\nimport {\n  IconButton,\n  makeStyles,\n  createStyles,\n  Popover,\n  Typography,\n  Theme,\n  Box\n} from \"@material-ui/core\";\n\ninterface Get_Process_Info_Props {\n  process: Process;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    typography: {\n      padding: theme.spacing(2),\n      maxWidth: 700,\n      wordWrap: \"break-word\"\n    }\n  })\n);\n\nexport default function SimplePopover({ process }: Get_Process_Info_Props) {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\n    null\n  );\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? \"simple-popover\" : undefined;\n\n  return (\n    <div>\n      <IconButton aria-describedby={id} color=\"default\" onClick={handleClick}>\n        <InfoOutlinedIcon />\n      </IconButton>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\"\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\"\n        }}\n      >\n        <Typography className={classes.typography}>\n          Title: {process.title} <br />\n          Description: {process.description} <br />\n          Author: {process.author} <br />\n          Created: {process.created_date.toLocaleString()} <br /> <br />\n          Activities:\n        </Typography>\n        {process.activities.map((a, index) => (\n          <Box style={{ marginLeft: \"2em\" }} key={index}>\n            Title: {a.title}\n            <br />\n            Description: {a.description} <br />\n            Outcome: {a.possible_states.join(\"/\")} <br />\n            <br />\n          </Box>\n        ))}\n      </Popover>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}