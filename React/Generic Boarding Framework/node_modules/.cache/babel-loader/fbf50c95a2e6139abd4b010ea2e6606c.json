{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/git/Projects/React/Generic Boarding Framework/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/git/Projects/React/Generic Boarding Framework/src/components/Get_Name_Modal.tsx\";\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { create_process_instance } from \"../backend/ts/database\";\nimport { Form, Field, Formik } from \"formik\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { IconButton, Tooltip, Zoom } from \"@material-ui/core\";\nexport default function Get_Name_Modal(props) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(Tooltip, {\n    TransitionComponent: Zoom,\n    TransitionProps: {\n      timeout: 300\n    },\n    title: \"Add instance of process\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    style: {\n      color: \"#22E700\"\n    },\n    onClick: handleClickOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(AddIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }))), React.createElement(Dialog, {\n    fullWidth: true,\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Select user for new process instance\"), React.createElement(Formik, {\n    initialValues: {\n      user_name: \"\"\n    },\n    onSubmit: (values, actions) => {\n      setOpen(false);\n      create_process_instance(props.process_template, values.user_name);\n      actions.setSubmitting(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, props => React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"user_name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, ({\n    field,\n    form,\n    meta\n  }) => React.createElement(TextField, Object.assign({\n    autoComplete: \"off\",\n    style: {\n      width: \"100%\"\n    },\n    type: \"text\",\n    label: \"Name\"\n  }, field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    onClick: () => {\n      props.handleSubmit();\n    },\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Create\"))))));\n}","map":{"version":3,"sources":["/Users/elgstrom/Desktop/git/Projects/React/Generic Boarding Framework/src/components/Get_Name_Modal.tsx"],"names":["React","Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","create_process_instance","Form","Field","Formik","AddIcon","IconButton","Tooltip","Zoom","Get_Name_Modal","props","useState","open","setOpen","handleClickOpen","handleClose","timeout","color","user_name","values","actions","process_template","setSubmitting","field","form","meta","width","handleSubmit"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { create_process_instance } from \"../backend/ts/database\";\nimport { Process } from \"../backend/ts/common_define\";\nimport { Form, Field, Formik, FieldProps } from \"formik\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { IconButton, Tooltip, Zoom } from \"@material-ui/core\";\n\ninterface Get_Name_Modal_Props {\n  process_template: Process;\n  //button_props: ButtonProps,\n}\n\nexport default function Get_Name_Modal(props: Get_Name_Modal_Props) {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      {/* //TODO  make this more general\n                eg get the what button should be from outside this component\n            */}\n      <Tooltip TransitionComponent={Zoom} TransitionProps={{ timeout: 300 }} title=\"Add instance of process\"> \n      <IconButton\n        style={{\n          color: \"#22E700\"\n        }}\n        onClick={handleClickOpen}\n      >\n        <AddIcon />\n      </IconButton>\n      </Tooltip>     \n      <Dialog\n        fullWidth\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">\n          Select user for new process instance\n        </DialogTitle>\n        <Formik\n          initialValues={{ user_name: \"\" }}\n          onSubmit={(values, actions) => {\n            setOpen(false);\n            create_process_instance(props.process_template, values.user_name);\n            actions.setSubmitting(false);\n          }}\n        >\n          {props => (\n            <Form>\n              <DialogContent>\n                <Field name=\"user_name\">\n                  {({ field, form, meta }: FieldProps) => (\n                    <TextField\n                      autoComplete=\"off\"\n                      style={{ width: \"100%\" }}\n                      type=\"text\"\n                      label=\"Name\"\n                      {...field}\n                    />\n                  )}\n                </Field>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button\n                  onClick={() => {\n                    props.handleSubmit();\n                  }}\n                  color=\"primary\"\n                >\n                  Create\n                </Button>\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}