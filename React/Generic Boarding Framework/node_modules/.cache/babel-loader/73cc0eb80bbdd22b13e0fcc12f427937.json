{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/Netgain/netgain-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/Netgain/netgain-1/src/views/Create_Activity.tsx\";\nimport * as React from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useState } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { save_activity_template, does_activity_exist } from \"../backend/ts/database\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { Chip } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => createStyles({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  textField: {\n    margin: theme.spacing(1),\n    width: \"100%\"\n  },\n  root: {\n    padding: theme.spacing(2),\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction InnerForm() {\n  const history = useHistory();\n  const classes = useStyles({});\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        submitDialogOpen = _useState2[0],\n        setSubmitDialogOpen = _useState2[1];\n\n  const handleClose = (answer, values) => {\n    setSubmitDialogOpen(false);\n\n    if (answer === true) {\n      submitActivity(values);\n    }\n  };\n\n  const submitActivity = values => {\n    console.log(values);\n    save_activity_template(values);\n    history.push(\"/View_Activities\");\n  };\n\n  return React.createElement(Formik, {\n    initialValues: {\n      title: \"\",\n      description: \"\",\n      possible_states: [\"\", \"\"],\n      automationSettings: \"\"\n    },\n    onSubmit: (values, actions) => {\n      does_activity_exist(values.title).then(does_exist => {\n        if (does_exist) setSubmitDialogOpen(true);else submitActivity(values);\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, ({\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    setFieldValue\n  }) => React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    name: \"title\",\n    className: classes.textField,\n    label: \"Activity Title\",\n    margin: \"normal\",\n    variant: \"outlined\",\n    autoComplete: \"off\",\n    type: \"text\",\n    required: true,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.title.length === 1 ? values.title.toUpperCase() : values.title,\n    inputProps: {\n      style: {\n        fontSize: 30\n      }\n    },\n    InputLabelProps: {\n      style: {\n        fontSize: 30\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    name: \"description\",\n    id: \"outlined-basic\",\n    className: classes.textField,\n    label: \"Description\",\n    margin: \"normal\",\n    multiline: true,\n    rows: \"3\",\n    variant: \"outlined\",\n    type: \"text\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(Autocomplete, {\n    multiple: true,\n    freeSolo: true,\n    onChange: (_, val) => setFieldValue(\"possible_states\", val),\n    defaultValue: [\"Done\", \"Not Possible\"],\n    onBlur: handleBlur,\n    className: classes.textField,\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      label: option\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      onKeyPress: e => {\n        //disable submit on enter as enter is used to create chips\n        if (e.key === \"Enter\") e.preventDefault();\n      },\n      fullWidth: true,\n      name: \"possible_states\",\n      label: \"Possible States\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    justify: \"center\",\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    open: submitDialogOpen,\n    onClose: () => {\n      handleClose(false, values);\n    },\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"An activity with this name already exists, do you want to overwrite it?\"), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => {\n      handleClose(false, values);\n    },\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"No\"), React.createElement(Button, {\n    onClick: () => {\n      handleClose(true, values);\n    },\n    color: \"primary\",\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"Yes\"))), React.createElement(Button, {\n    variant: \"contained\",\n    className: classes.button,\n    type: \"submit\",\n    color: \"primary\",\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"Save\"))));\n}\n\nexport default InnerForm;","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Netgain/netgain-1/src/views/Create_Activity.tsx"],"names":["React","useHistory","useState","Form","Formik","createStyles","makeStyles","TextField","Button","Paper","Grid","Dialog","DialogActions","DialogTitle","save_activity_template","does_activity_exist","Autocomplete","Chip","useStyles","theme","container","display","flexWrap","button","margin","spacing","textField","width","root","padding","InnerForm","history","classes","submitDialogOpen","setSubmitDialogOpen","handleClose","answer","values","submitActivity","console","log","push","title","description","possible_states","automationSettings","actions","then","does_exist","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","length","toUpperCase","style","fontSize","_","val","value","getTagProps","map","option","index","params","e","key","preventDefault"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useState } from \"react\";\nimport { Form, FieldArray, Formik } from \"formik\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport { Activity } from \"../backend/ts/common_define\";\nimport {\n  save_activity_template,\n  does_activity_exist\n} from \"../backend/ts/database\";\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { Chip } from \"@material-ui/core\";\n\ninterface OtherProps {\n  title?: string;\n}\n\ninterface CreateActivityProps {\n  title?: string;\n  description?: string;\n  status?: Array<Activity>;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    button: {\n      margin: theme.spacing(1)\n    },\n    textField: {\n      margin: theme.spacing(1),\n      width: \"100%\"\n    },\n    root: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(1)\n    }\n  })\n);\n\nfunction InnerForm() {\n  const history = useHistory();\n  const classes = useStyles({});\n  const [submitDialogOpen, setSubmitDialogOpen] = useState(false);\n\n  const handleClose = (answer: Boolean, values: Activity) => {\n    setSubmitDialogOpen(false);\n    if (answer === true) {\n      submitActivity(values);\n    }\n  };\n\n  const submitActivity = (values: Activity) => {\n    console.log(values);\n    save_activity_template(values);\n    history.push(\"/View_Activities\");\n  };\n  return (\n    <Formik\n      initialValues={{\n        title: \"\",\n        description: \"\",\n        possible_states: [\"\", \"\"],\n        automationSettings: \"\"\n      }}\n      onSubmit={(values, actions) => {\n        does_activity_exist(values.title).then(does_exist => {\n          if (does_exist) setSubmitDialogOpen(true);\n          else submitActivity(values);\n        });\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        setFieldValue\n      }) => (\n        <Form>\n          <Paper className={classes.root}>\n            <Grid container justify=\"center\">\n              <TextField\n                name=\"title\"\n                className={classes.textField}\n                label=\"Activity Title\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                autoComplete=\"off\"\n                type=\"text\"\n                required\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={\n                  values.title.length === 1\n                    ? values.title.toUpperCase()\n                    : values.title\n                }\n                inputProps={{\n                  style: { fontSize: 30 }\n                }}\n                InputLabelProps={{\n                  style: { fontSize: 30 }\n                }}\n              />\n              <TextField\n                name=\"description\"\n                id=\"outlined-basic\"\n                className={classes.textField}\n                label=\"Description\"\n                margin=\"normal\"\n                multiline\n                rows=\"3\"\n                variant=\"outlined\"\n                type=\"text\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.description}\n              />\n              <Autocomplete\n                multiple\n                freeSolo\n                onChange={(_, val) => setFieldValue(`possible_states`, val)}\n                defaultValue={[\"Done\", \"Not Possible\"]}\n                onBlur={handleBlur}\n                className={classes.textField}\n                renderTags={(value: string[], getTagProps) =>\n                  value.map((option: string, index: number) => (\n                    <Chip\n                      variant=\"outlined\"\n                      label={option}\n                      {...getTagProps({ index })}\n                    />\n                  ))\n                }\n                renderInput={params => (\n                  <TextField\n                    {...params}\n                    onKeyPress={e => {\n                      //disable submit on enter as enter is used to create chips\n                      if (e.key === \"Enter\") e.preventDefault();\n                    }}\n                    fullWidth\n                    name={`possible_states`}\n                    label=\"Possible States\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    type=\"text\"\n                  />\n                )}\n              />\n            </Grid>\n          </Paper>\n          <Grid justify=\"center\" container>\n            <Dialog\n              open={submitDialogOpen}\n              onClose={() => {\n                handleClose(false, values);\n              }}\n              aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\"\n            >\n              <DialogTitle id=\"alert-dialog-title\">\n                {\n                  \"An activity with this name already exists, do you want to overwrite it?\"\n                }\n              </DialogTitle>\n              <DialogActions>\n                <Button\n                  onClick={() => {\n                    handleClose(false, values);\n                  }}\n                  color=\"primary\"\n                >\n                  No\n                </Button>\n                <Button\n                  onClick={() => {\n                    handleClose(true, values);\n                  }}\n                  color=\"primary\"\n                  autoFocus\n                >\n                  Yes\n                </Button>\n              </DialogActions>\n            </Dialog>\n            <Button\n              variant=\"contained\"\n              className={classes.button}\n              type=\"submit\"\n              color=\"primary\"\n              disabled={isSubmitting}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default InnerForm;\n"]},"metadata":{},"sourceType":"module"}