{"ast":null,"code":"var _jsxFileName = \"/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Activity_Component.tsx\";\nimport * as React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport { Activity } from \"../backend/ts/common_define\";\nimport { Chip } from \"@material-ui/core\";\nimport GetJSONModal from \"./Get_JSON_Modal\";\n\nfunction Activity_Component({\n  prefix,\n  activity,\n  index,\n  classes,\n  arrayHelpers,\n  amountOfActivities,\n  formikProps\n}) {\n  return React.createElement(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"off\",\n    name: \"\".concat(prefix, \"title\"),\n    className: classes.textField,\n    label: \"Activity Title\",\n    margin: \"normal\",\n    variant: \"outlined\",\n    type: \"text\",\n    required: true,\n    onChange: formikProps.handleChange,\n    onBlur: formikProps.handleBlur,\n    value: activity.title.length === 1 ? activity.title.toUpperCase() : activity.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    name: \"\".concat(prefix, \"description\"),\n    id: \"outlined-basic\",\n    className: classes.textField,\n    label: \"Description\",\n    margin: \"normal\",\n    multiline: true,\n    rows: \"3\",\n    variant: \"outlined\",\n    type: \"text\",\n    onChange: formikProps.handleChange,\n    onBlur: formikProps.handleBlur,\n    value: activity.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(Autocomplete, {\n    multiple: true,\n    freeSolo: true,\n    onChange: (_, val) => formikProps.setFieldValue(\"\".concat(prefix, \"possible_states\"), val),\n    defaultValue: [\"Done\", \"Not Possible\"],\n    onBlur: formikProps.handleBlur,\n    className: classes.textField,\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      label: option\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      onKeyPress: e => {\n        //disable submit on enter as enter is used to create chips\n        if (e.key === \"Enter\") e.preventDefault();\n      },\n      fullWidth: true,\n      name: \"\".concat(prefix, \"possible_states\"),\n      label: \"Possible States\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    style: {\n      flexGrow: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(GetJSONModal, {\n    fieldName: \"\".concat(prefix, \"automationSettings\"),\n    setFunc: formikProps.setFieldValue,\n    btnClass: classes.button,\n    startText: Object.keys(activity.automationSettings).length === 0 && activity.automationSettings.constructor === Object ? \"\" : JSON.stringify(activity.automationSettings, undefined, 4),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })), arrayHelpers !== undefined && amountOfActivities !== undefined && React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    className: classes.button,\n    \"aria-label\": \"add\",\n    color: \"default\",\n    onClick: () => arrayHelpers.insert(index + 1, new Activity()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(AddIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })), React.createElement(IconButton, {\n    className: classes.button,\n    disabled: amountOfActivities < 2,\n    \"aria-label\": \"remove\",\n    color: \"default\",\n    onClick: () => arrayHelpers.remove(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(RemoveIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }))));\n}\n\nexport default Activity_Component;","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Activity_Component.tsx"],"names":["React","TextField","Paper","Grid","IconButton","AddIcon","Autocomplete","RemoveIcon","Activity","Chip","GetJSONModal","Activity_Component","prefix","activity","index","classes","arrayHelpers","amountOfActivities","formikProps","paper","textField","handleChange","handleBlur","title","length","toUpperCase","description","_","val","setFieldValue","value","getTagProps","map","option","params","e","key","preventDefault","flexGrow","button","Object","keys","automationSettings","constructor","JSON","stringify","undefined","insert","remove"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { ArrayHelpers, FormikProps } from \"formik\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport { Activity } from \"../backend/ts/common_define\";\nimport { Chip } from \"@material-ui/core\";\nimport GetJSONModal from \"./Get_JSON_Modal\";\n\ninterface Activity_Component_Props {\n  prefix: string;\n  activity: Activity;\n  index: number;\n  classes: Record<any, string>;\n  arrayHelpers?: ArrayHelpers;\n  amountOfActivities?: number;\n  formikProps: FormikProps<any>;\n}\n\nfunction Activity_Component({\n  prefix,\n  activity,\n  index,\n  classes,\n  arrayHelpers,\n  amountOfActivities,\n  formikProps\n}: Activity_Component_Props) {\n  return (\n    <Paper className={classes.paper}>\n      <Grid container justify=\"center\">\n        <TextField\n          autoComplete=\"off\"\n          name={`${prefix}title`}\n          className={classes.textField}\n          label=\"Activity Title\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          type=\"text\"\n          required\n          onChange={formikProps.handleChange}\n          onBlur={formikProps.handleBlur}\n          value={\n            activity.title.length === 1\n              ? activity.title.toUpperCase()\n              : activity.title\n          }\n        />\n        <TextField\n          name={`${prefix}description`}\n          id=\"outlined-basic\"\n          className={classes.textField}\n          label=\"Description\"\n          margin=\"normal\"\n          multiline\n          rows=\"3\"\n          variant=\"outlined\"\n          type=\"text\"\n          onChange={formikProps.handleChange}\n          onBlur={formikProps.handleBlur}\n          value={activity.description}\n        />\n        <Autocomplete\n          multiple\n          freeSolo\n          onChange={(_, val) =>\n            formikProps.setFieldValue(`${prefix}possible_states`, val)\n          }\n          defaultValue={[\"Done\", \"Not Possible\"]}\n          onBlur={formikProps.handleBlur}\n          className={classes.textField}\n          renderTags={(value: string[], getTagProps) =>\n            value.map((option: string, index: number) => (\n              <Chip\n                variant=\"outlined\"\n                label={option}\n                {...getTagProps({ index })}\n              />\n            ))\n          }\n          renderInput={params => (\n            <TextField\n              {...params}\n              onKeyPress={e => {\n                //disable submit on enter as enter is used to create chips\n                if (e.key === \"Enter\") e.preventDefault();\n              }}\n              fullWidth\n              name={`${prefix}possible_states`}\n              label=\"Possible States\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"text\"\n            />\n          )}\n        />\n        <Grid container style={{ flexGrow: 1 }}>\n          <Grid item xs={4}>\n            <GetJSONModal\n              fieldName={`${prefix}automationSettings`}\n              setFunc={formikProps.setFieldValue}\n              btnClass={classes.button}\n              startText={\n                Object.keys(activity.automationSettings).length === 0 &&\n                activity.automationSettings.constructor === Object\n                  ? \"\"\n                  : JSON.stringify(activity.automationSettings, undefined, 4)\n              }\n            />\n          </Grid>\n          {arrayHelpers !== undefined && amountOfActivities !== undefined && (\n            <Grid item xs={4}>\n              <Grid container justify=\"center\">\n                <IconButton\n                  className={classes.button}\n                  aria-label=\"add\"\n                  color=\"default\"\n                  onClick={() => arrayHelpers.insert(index+1, new Activity())}\n                >\n                  <AddIcon />\n                </IconButton>\n                <IconButton\n                  className={classes.button}\n                  disabled={amountOfActivities < 2}\n                  aria-label=\"remove\"\n                  color=\"default\"\n                  onClick={() => arrayHelpers.remove(index)}\n                >\n                  <RemoveIcon />\n                </IconButton>\n              </Grid>\n            </Grid>\n          )}\n          <Grid item xs={4}></Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\nexport default Activity_Component;\n"]},"metadata":{},"sourceType":"module"}