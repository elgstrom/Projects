{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/Netgain/netgain-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Get_Name_Modal.tsx\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { create_process_instance } from '../backend/ts/database';\nimport { Form, Field, Formik } from \"formik\";\nimport AddIcon from '@material-ui/icons/Add';\nimport { IconButton } from '@material-ui/core';\nexport default function Get_Name_Modal(props) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    style: {\n      color: \"#22E700\"\n    },\n    onClick: handleClickOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(AddIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), React.createElement(Dialog, {\n    fullWidth: true,\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Select user for new process instance\"), React.createElement(Formik, {\n    initialValues: {\n      user_name: \"\"\n    },\n    onSubmit: (values, actions) => {\n      setOpen(false);\n      create_process_instance(props.process_template, values.user_name);\n      actions.setSubmitting(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, props => React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"user_name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, ({\n    field,\n    form,\n    meta\n  }) => React.createElement(TextField, Object.assign({\n    style: {\n      width: \"100%\"\n    },\n    type: \"text\",\n    label: \"Name\"\n  }, field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    onClick: () => {\n      props.handleSubmit();\n    },\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Create\"))))));\n}","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Get_Name_Modal.tsx"],"names":["React","Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","create_process_instance","Form","Field","Formik","AddIcon","IconButton","Get_Name_Modal","props","useState","open","setOpen","handleClickOpen","handleClose","color","user_name","values","actions","process_template","setSubmitting","field","form","meta","width","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { create_process_instance } from '../backend/ts/database';\nimport { Process } from '../backend/ts/common_define';\nimport { Form, Field, Formik, FieldProps } from \"formik\";\nimport AddIcon from '@material-ui/icons/Add';\nimport { IconButton } from '@material-ui/core';\n\ninterface Get_Name_Modal_Props {\n    process_template: Process,\n    //button_props: ButtonProps,\n}\n\n\nexport default function Get_Name_Modal(props: Get_Name_Modal_Props) {\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose= () => {\n        setOpen(false);\n    };\n\n\n    return (\n        <div>\n            {/* //TODO  make this more general\n                eg get the what button should be from outside this component\n            */}\n            <IconButton\n                style={{\n                color: \"#22E700\"\n                }}\n                onClick={handleClickOpen}\n                ><AddIcon /></IconButton>\n            <Dialog\n                fullWidth\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n\n                <DialogTitle id=\"form-dialog-title\">Select user for new process instance</DialogTitle>\n                <Formik\n                initialValues={{ user_name: \"\" }}\n                onSubmit={(values, actions) => {\n                    setOpen(false);\n                    create_process_instance(props.process_template, values.user_name);\n                    actions.setSubmitting(false);\n                }}\n                \n                >{(props) =>  (\n                    <Form>\n                        <DialogContent>\n                            <Field\n                                name=\"user_name\"\n                            >{({field, form, meta}:FieldProps) => (\n                                <TextField\n                                    style={{ width: \"100%\" }}\n                                    type=\"text\"\n                                    label=\"Name\"\n                                    {...field}\n                                />\n                            )}</Field>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={handleClose} color=\"primary\">Cancel</Button>\n                            <Button onClick={() => { props.handleSubmit(); }} color=\"primary\">Create</Button>\n                        </DialogActions>\n                    </Form>\n\n                )}</Formik>\n            </Dialog>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}