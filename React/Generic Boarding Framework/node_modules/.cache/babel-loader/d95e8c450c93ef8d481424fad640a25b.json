{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/Netgain/netgain-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Process_timeline.tsx\";\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepContent from \"@material-ui/core/StepContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { process_instance_update_step, process_instance_update_activity_state } from \"../backend/ts/database\";\nimport { StepButton, ButtonGroup } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    width: \"100%\"\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2)\n  },\n  resetContainer: {\n    padding: theme.spacing(3)\n  },\n  completed: {\n    display: \"inline-block\"\n  }\n}));\n//TODO maybe just use higher component state for active step?\nexport default function VerticalLinearStepper(props) {\n  const classes = useStyles({}); //init active step to props.process.step\n\n  const _React$useState = React.useState(props.process.activeStep),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        activeStep = _React$useState2[0],\n        setActiveStep = _React$useState2[1];\n\n  const _React$useState3 = React.useState(props.process),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        processState = _React$useState4[0],\n        setProcessState = _React$useState4[1];\n\n  const _React$useState5 = React.useState(props.process.activities.map(a => !!(a.state >= 0))),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        completed = _React$useState6[0],\n        setCompleted = _React$useState6[1];\n\n  const amountOfSteps = props.process.activities.length;\n\n  const update_step_counter = current_step => {\n    process_instance_update_step(props.process, current_step);\n  };\n\n  const getStepContent = step => {\n    return props.process.activities[step].description;\n  };\n\n  const handleNext = () => {\n    update_step_counter(activeStep + 1);\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleReset = () => {\n    update_step_counter(0);\n    setActiveStep(0);\n    setCompleted({});\n\n    for (let A of props.process.activities) {\n      process_instance_update_activity_state(props.process, A, -1);\n    }\n  };\n\n  const handleComplete = e => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext(); //indexOf would not work here as the comparison is case sensitive\n\n    let state_index = -1;\n\n    for (let index = 0; index < props.process.activities[activeStep].possible_states.length; index++) {\n      const element = props.process.activities[activeStep].possible_states[index];\n\n      if (element.toUpperCase() === e.currentTarget.innerText.toUpperCase()) {\n        state_index = index;\n      }\n    }\n\n    props.process.activities[activeStep].state = state_index;\n    setProcessState(props.process);\n    props.process.activities[activeStep].possible_states.indexOf(e.currentTarget.innerText);\n    process_instance_update_activity_state(props.process, props.process.activities[activeStep], state_index);\n  };\n\n  const handleStep = step => () => {\n    update_step_counter(step);\n    setActiveStep(step);\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Stepper, {\n    nonLinear: true,\n    activeStep: activeStep,\n    orientation: \"vertical\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, props.process.activities.map((activity, index) => React.createElement(Step, {\n    key: activity.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(StepButton, {\n    onClick: handleStep(index),\n    completed: completed[index],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, activity.title, activity.state >= 0 ? \" - \".concat(activity.possible_states[activity.state]) : null), React.createElement(StepContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    style: {\n      whiteSpace: \"pre-line\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, getStepContent(index)), activeStep !== props.process.activities.length && (completed[activeStep] ? null : React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    style: {\n      marginTop: \"0.3em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(ButtonGroup, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, activity.possible_states.map((state, index) => React.createElement(Button, {\n    key: \"state_button_\".concat(index),\n    onClick: handleComplete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, state)))))))))), React.createElement(Paper, {\n    square: true,\n    elevation: 0,\n    className: classes.resetContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleReset,\n    className: classes.button,\n    variant: \"contained\",\n    style: {\n      backgroundColor: \"#33cc33\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Reset\")));\n}","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Process_timeline.tsx"],"names":["React","makeStyles","createStyles","Stepper","Step","StepContent","Button","Paper","Grid","Typography","process_instance_update_step","process_instance_update_activity_state","StepButton","ButtonGroup","useStyles","theme","root","width","button","marginTop","spacing","marginRight","actionsContainer","marginBottom","resetContainer","padding","completed","display","VerticalLinearStepper","props","classes","useState","process","activeStep","setActiveStep","processState","setProcessState","activities","map","a","state","setCompleted","amountOfSteps","length","update_step_counter","current_step","getStepContent","step","description","handleNext","prevActiveStep","handleReset","A","handleComplete","e","newCompleted","state_index","index","possible_states","element","toUpperCase","currentTarget","innerText","indexOf","handleStep","completedSteps","Object","keys","activity","title","whiteSpace","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepContent from \"@material-ui/core/StepContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { ProcessInstance, ActivityInstance } from \"../backend/ts/common_define\";\nimport {\n  process_instance_update_step,\n  process_instance_update_activity_state\n} from \"../backend/ts/database\";\nimport { StepButton, ButtonGroup } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\"\n    },\n    button: {\n      marginTop: theme.spacing(1),\n      marginRight: theme.spacing(1)\n    },\n    actionsContainer: {\n      marginBottom: theme.spacing(2)\n    },\n    resetContainer: {\n      padding: theme.spacing(3)\n    },\n    completed: {\n      display: \"inline-block\"\n    }\n  })\n);\n\ninterface Line_Stepper_Props {\n  process: ProcessInstance;\n}\n//TODO maybe just use higher component state for active step?\nexport default function VerticalLinearStepper(props: Line_Stepper_Props) {\n  const classes = useStyles({});\n  //init active step to props.process.step\n  const [activeStep, setActiveStep] = React.useState(props.process.activeStep);\n  const [processState, setProcessState] = React.useState(props.process);\n  const [completed, setCompleted] = React.useState<{ [k: number]: boolean }>(\n    props.process.activities.map(a => !!(a.state >= 0))\n  );\n  const amountOfSteps = props.process.activities.length;\n\n  const update_step_counter = (current_step: number) => {\n    process_instance_update_step(props.process, current_step);\n  };\n\n  const getStepContent = (step: number) => {\n    return props.process.activities[step].description;\n  };\n\n  const handleNext = () => {\n    update_step_counter(activeStep + 1);\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleReset = () => {\n    update_step_counter(0);\n    setActiveStep(0);\n    setCompleted({});\n    for (let A of props.process.activities) {\n      process_instance_update_activity_state(props.process, A, -1);\n    }\n  };\n\n  const handleComplete = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n    //indexOf would not work here as the comparison is case sensitive\n    let state_index = -1;\n    for (\n      let index = 0;\n      index < props.process.activities[activeStep].possible_states.length;\n      index++\n    ) {\n      const element =\n        props.process.activities[activeStep].possible_states[index];\n      if (element.toUpperCase() === e.currentTarget.innerText.toUpperCase()) {\n        state_index = index;\n      }\n    }\n    props.process.activities[activeStep].state = state_index;\n    setProcessState(props.process);\n\n    props.process.activities[activeStep].possible_states.indexOf(\n      e.currentTarget.innerText\n    );\n    process_instance_update_activity_state(\n      props.process,\n      props.process.activities[activeStep],\n      state_index\n    );\n  };\n\n  const handleStep = (step: number) => () => {\n    update_step_counter(step);\n    setActiveStep(step);\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  return (\n    <div className={classes.root}>\n      <Stepper nonLinear activeStep={activeStep} orientation=\"vertical\">\n        {props.process.activities.map((activity, index) => (\n          <Step key={activity.title}>\n            <StepButton\n              onClick={handleStep(index)}\n              completed={completed[index]}\n            >\n              {activity.title}\n              {activity.state >= 0\n                ? ` - ${activity.possible_states[activity.state]}`\n                : null}\n            </StepButton>\n\n            <StepContent>\n              <Typography variant=\"body1\" style={{ whiteSpace: \"pre-line\" }}>\n                {getStepContent(index)}\n              </Typography>\n              {activeStep !== props.process.activities.length &&\n                (completed[activeStep] ? null : (\n                  <Grid container spacing={2} style={{ marginTop: \"0.3em\" }}>\n                    <Grid item>\n                      <ButtonGroup color=\"primary\">\n                        {activity.possible_states.map((state, index) => (\n                          <Button\n                            key={`state_button_${index}`}\n                            onClick={handleComplete}\n                          >\n                            {state}\n                          </Button>\n                        ))}\n                      </ButtonGroup>\n                    </Grid>\n                  </Grid>\n                ))}\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n\n      <Paper square elevation={0} className={classes.resetContainer}>\n        <Button\n          onClick={handleReset}\n          className={classes.button}\n          variant=\"contained\"\n          style={{ backgroundColor: \"#33cc33\" }}\n        >\n          Reset\n        </Button>\n      </Paper>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}