{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/Jobb/Netgain/netgain-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/Jobb/Netgain/netgain-1/src/views/Create_Process_Form.tsx\";\nimport * as React from \"react\";\nimport { Form, FieldArray, Formik, Field } from \"formik\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Process, Activity } from \"../backend/ts/common_define\";\nimport { save_process_template, does_process_exist } from \"../backend/ts/database\";\nimport { useHistory } from \"react-router\";\nimport { useState } from \"react\";\nimport ActivityComponent from \"../components/Activity_Component\";\nimport DrawerComponent from \"../components/Drawer_Component\";\nimport { Fab } from \"@material-ui/core\";\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\n/* interface OtherProps {\n  title?: string;\n}\n\ninterface CreateProcessProps {\n  title?: string;\n  description?: string;\n  activities?: Array<Activity>;\n} */\n\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    display: \"flex\"\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  textField: {\n    margin: theme.spacing(1),\n    width: \"100%\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: theme.spacing(1)\n  },\n  card: {\n    \"&:hover\": {\n      boxShadow: \"0 5px 15px rgba(0,0,0,0.3)\"\n    }\n  },\n  fab: {\n    margin: 0,\n    top: \"6em\",\n    right: \"auto\",\n    bottom: \"4em\",\n    left: \"2em\",\n    position: \"fixed\"\n  }\n}));\n\nfunction InnerForm() {\n  const history = useHistory();\n  const classes = useStyles({});\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        submitDialogOpen = _useState2[0],\n        setSubmitDialogOpen = _useState2[1];\n\n  const setForceUpdate = useState(0)[1];\n\n  const _React$useState = React.useState({\n    index: -1,\n    drawerOpen: false\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const handleClose = (answer, values) => {\n    setSubmitDialogOpen(false);\n\n    if (answer === true) {\n      submitProcess(values);\n    }\n  };\n\n  const submitProcess = values => {\n    save_process_template(values);\n    console.log(values);\n    history.push(\"/View_Process_Templates\");\n  };\n\n  const addActivityTemplate = activity => {\n    if (fp !== undefined && state.index !== -1) {\n      console.log(activity);\n      fp.values.activities.splice(state.index + 1, 0, activity); //need the page to render so update a state\n\n      setForceUpdate(value => ++value);\n      console.log(fp);\n    }\n  };\n\n  const toggleDrawer = (open, index) => event => {\n    console.log(open);\n\n    if (event.type === \"keydown\" && (event.key === \"Tab\" || event.key === \"Shift\")) {\n      return;\n    }\n\n    setState({\n      drawerOpen: open,\n      index\n    });\n  };\n\n  let fp;\n  let initVals = new Process();\n  initVals.activities.push(new Activity());\n  console.log(initVals);\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(DrawerComponent, {\n    open: state.drawerOpen,\n    handleClick: addActivityTemplate,\n    onToggleDrawer: toggleDrawer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(Fab, {\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    size: \"large\",\n    className: classes.fab,\n    onClick: toggleDrawer(true, 0),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(PostAddIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  })), React.createElement(Formik, {\n    initialValues: initVals,\n    onSubmit: (values, actions) => {\n      console.log(values);\n      does_process_exist(values.title).then(does_exist => {\n        if (does_exist) setSubmitDialogOpen(true);else submitProcess(values);\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, formikProps => {\n    fp = formikProps;\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      name: \"title\",\n      className: classes.textField,\n      label: \"Process Title\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      autoComplete: \"off\",\n      type: \"text\",\n      required: true,\n      onChange: formikProps.handleChange,\n      onBlur: formikProps.handleBlur,\n      value: formikProps.values.title.length === 1 ? formikProps.values.title.toUpperCase() : formikProps.values.title,\n      inputProps: {\n        style: {\n          fontSize: 30\n        }\n      },\n      InputLabelProps: {\n        style: {\n          fontSize: 30\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      name: \"description\",\n      id: \"outlined-basic\",\n      className: classes.textField,\n      label: \"Description\",\n      margin: \"normal\",\n      multiline: true,\n      rows: \"3\",\n      variant: \"outlined\",\n      type: \"text\",\n      onChange: formikProps.handleChange,\n      onBlur: formikProps.handleBlur,\n      value: formikProps.values.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"author\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, ({\n      field\n    }) => React.createElement(TextField, Object.assign({\n      className: classes.textField,\n      label: \"Author\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      autoComplete: \"off\",\n      type: \"text\",\n      required: true\n    }, field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }))))), React.createElement(FieldArray, {\n      name: \"activities\",\n      render: helpers => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, formikProps.values.activities && formikProps.values.activities.length > 0 ? formikProps.values.activities.map((activity, index) => React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(ActivityComponent, {\n        prefix: \"activities.\".concat(index, \".\"),\n        activity: activity,\n        index: index,\n        classes: classes,\n        amountOfActivities: formikProps.values.activities.length,\n        arrayHelpers: helpers,\n        formikProps: formikProps,\n        onToggleDrawer: toggleDrawer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }))) : null, React.createElement(Grid, {\n        justify: \"center\",\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(AlreadyExistDialog, {\n        handleClose: handleClose,\n        values: formikProps.values,\n        submitDialogOpen: submitDialogOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        className: classes.button,\n        type: \"submit\",\n        color: \"primary\",\n        disabled: formikProps.isSubmitting,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"Save\"))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }));\n  }));\n}\n\nfunction AlreadyExistDialog({\n  submitDialogOpen,\n  handleClose,\n  values\n}) {\n  return React.createElement(Dialog, {\n    open: submitDialogOpen,\n    onClose: () => {\n      handleClose(false, values);\n    },\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, \"A process with this name already exists, do you want to overwrite it?\"), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => {\n      handleClose(false, values);\n    },\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, \"No\"), React.createElement(Button, {\n    onClick: () => {\n      handleClose(true, values);\n    },\n    color: \"primary\",\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, \"Yes\")));\n}\n\nexport default InnerForm;","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Jobb/Netgain/netgain-1/src/views/Create_Process_Form.tsx"],"names":["React","Form","FieldArray","Formik","Field","createStyles","makeStyles","TextField","Button","Paper","Grid","Dialog","DialogActions","DialogTitle","Process","Activity","save_process_template","does_process_exist","useHistory","useState","ActivityComponent","DrawerComponent","Fab","PostAddIcon","useStyles","theme","root","display","container","flexWrap","button","margin","spacing","textField","width","paper","padding","card","boxShadow","fab","top","right","bottom","left","position","InnerForm","history","classes","submitDialogOpen","setSubmitDialogOpen","setForceUpdate","index","drawerOpen","state","setState","handleClose","answer","values","submitProcess","console","log","push","addActivityTemplate","activity","fp","undefined","activities","splice","value","toggleDrawer","open","event","type","key","initVals","actions","title","then","does_exist","formikProps","handleChange","handleBlur","length","toUpperCase","style","fontSize","description","field","helpers","map","isSubmitting","AlreadyExistDialog"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  FormikProps,\n  Form,\n  FieldArray,\n  Formik,\n  Field,\n  FieldProps\n} from \"formik\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Process, Activity } from \"../backend/ts/common_define\";\nimport {\n  save_process_template,\n  does_process_exist\n} from \"../backend/ts/database\";\nimport { useHistory } from \"react-router\";\nimport { useState } from \"react\";\nimport ActivityComponent from \"../components/Activity_Component\";\nimport DrawerComponent from \"../components/Drawer_Component\";\nimport { Fab } from \"@material-ui/core\";\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\n\n/* interface OtherProps {\n  title?: string;\n}\n\ninterface CreateProcessProps {\n  title?: string;\n  description?: string;\n  activities?: Array<Activity>;\n} */\n\ninterface AlreadyExistDialog {\n  submitDialogOpen: boolean;\n  values: Process;\n  handleClose(answer: Boolean, values: Process): void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    button: {\n      margin: theme.spacing(1)\n    },\n    textField: {\n      margin: theme.spacing(1),\n      width: \"100%\"\n    },\n    paper: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(1)\n    },\n    card: {\n      \"&:hover\": {\n        boxShadow: \"0 5px 15px rgba(0,0,0,0.3)\"\n      },\n    },\n    fab: {\n      margin: 0,\n      top: \"6em\",\n      right: \"auto\",\n      bottom: \"4em\",\n      left: \"2em\",\n      position: \"fixed\"\n    }\n  })\n);\n\nfunction InnerForm() {\n  const history = useHistory();\n  const classes = useStyles({});\n  const [submitDialogOpen, setSubmitDialogOpen] = useState(false);\n  const setForceUpdate = useState(0)[1];\n\n  const [state, setState] = React.useState({\n    index: -1,\n    drawerOpen: false\n  });\n\n  const handleClose = (answer: Boolean, values: Process) => {\n    setSubmitDialogOpen(false);\n    if (answer === true) {\n      submitProcess(values);\n    }\n  };\n\n  const submitProcess = (values: Process) => {\n    save_process_template(values);\n    console.log(values);\n    history.push(\"/View_Process_Templates\");\n  };\n\n  const addActivityTemplate = (activity: Activity) => {\n    if (fp !== undefined && state.index !== -1) {\n      console.log(activity);\n      fp.values.activities.splice(state.index + 1, 0, activity);\n      //need the page to render so update a state\n      setForceUpdate(value => ++value);\n      console.log(fp);\n    }\n  };\n\n  const toggleDrawer = (open: boolean, index: number) => (\n    event: React.KeyboardEvent | React.MouseEvent\n  ) => {\n    console.log(open);\n    if (\n      event.type === \"keydown\" &&\n      ((event as React.KeyboardEvent).key === \"Tab\" ||\n        (event as React.KeyboardEvent).key === \"Shift\")\n    ) {\n      return;\n    }\n\n    setState({ drawerOpen: open, index });\n  };\n\n  let fp: FormikProps<any>;\n  let initVals = new Process();\n  initVals.activities.push(new Activity());\n  console.log(initVals);\n  return (\n    <div className={classes.root}>\n      <DrawerComponent\n        open={state.drawerOpen}\n        handleClick={addActivityTemplate}\n        onToggleDrawer={toggleDrawer}\n      />\n      <Fab\n        color=\"primary\"\n        aria-label=\"add\"\n        size=\"large\"\n        className={classes.fab}\n        onClick={toggleDrawer(true, 0)}\n      >\n        <PostAddIcon />\n      </Fab>\n      <Formik\n        initialValues={initVals}\n        onSubmit={(values, actions) => {\n          console.log(values);\n          does_process_exist(values.title).then(does_exist => {\n            if (does_exist) setSubmitDialogOpen(true);\n            else submitProcess(values);\n          });\n        }}\n      >\n        {(formikProps: FormikProps<any>) => {\n          fp = formikProps;\n          return (\n            <Form>\n              <Paper className={classes.paper}>\n                <Grid container justify=\"center\">\n                  <TextField\n                    name=\"title\"\n                    className={classes.textField}\n                    label=\"Process Title\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    autoComplete=\"off\"\n                    type=\"text\"\n                    required\n                    onChange={formikProps.handleChange}\n                    onBlur={formikProps.handleBlur}\n                    value={\n                      formikProps.values.title.length === 1\n                        ? formikProps.values.title.toUpperCase()\n                        : formikProps.values.title\n                    }\n                    inputProps={{\n                      style: { fontSize: 30 }\n                    }}\n                    InputLabelProps={{\n                      style: { fontSize: 30 }\n                    }}\n                  />\n                  <TextField\n                    name=\"description\"\n                    id=\"outlined-basic\"\n                    className={classes.textField}\n                    label=\"Description\"\n                    margin=\"normal\"\n                    multiline\n                    rows=\"3\"\n                    variant=\"outlined\"\n                    type=\"text\"\n                    onChange={formikProps.handleChange}\n                    onBlur={formikProps.handleBlur}\n                    value={formikProps.values.description}\n                  />\n                  <Field name=\"author\">\n                    {({ field }: FieldProps) => (\n                      <TextField\n                        className={classes.textField}\n                        label=\"Author\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        autoComplete=\"off\"\n                        type=\"text\"\n                        required\n                        {...field}\n                      />\n                    )}\n                  </Field>\n                </Grid>\n              </Paper>\n              <FieldArray\n                name=\"activities\"\n                render={helpers => (\n                  <div>\n                    {formikProps.values.activities &&\n                    formikProps.values.activities.length > 0\n                      ? formikProps.values.activities.map(\n                          (activity: Activity, index: number) => (\n                            <div key={index}>\n                              <ActivityComponent\n                                prefix={`activities.${index}.`}\n                                activity={activity}\n                                index={index}\n                                classes={classes}\n                                amountOfActivities={\n                                  formikProps.values.activities.length\n                                }\n                                arrayHelpers={helpers}\n                                formikProps={formikProps}\n                                onToggleDrawer={toggleDrawer}\n                              />\n                            </div>\n                          )\n                        )\n                      : null}\n                    <Grid justify=\"center\" container>\n                      <AlreadyExistDialog\n                        handleClose={handleClose}\n                        values={formikProps.values}\n                        submitDialogOpen={submitDialogOpen}\n                      />\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        type=\"submit\"\n                        color=\"primary\"\n                        disabled={formikProps.isSubmitting}\n                      >\n                        Save\n                      </Button>\n                    </Grid>\n                  </div>\n                )}\n              />\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n}\n\nfunction AlreadyExistDialog({\n  submitDialogOpen,\n  handleClose,\n  values\n}: AlreadyExistDialog) {\n  return (\n    <Dialog\n      open={submitDialogOpen}\n      onClose={() => {\n        handleClose(false, values);\n      }}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\n          \"A process with this name already exists, do you want to overwrite it?\"\n        }\n      </DialogTitle>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            handleClose(false, values);\n          }}\n          color=\"primary\"\n        >\n          No\n        </Button>\n        <Button\n          onClick={() => {\n            handleClose(true, values);\n          }}\n          color=\"primary\"\n          autoFocus\n        >\n          Yes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default InnerForm;\n"]},"metadata":{},"sourceType":"module"}