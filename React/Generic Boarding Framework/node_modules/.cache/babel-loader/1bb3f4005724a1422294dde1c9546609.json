{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/Netgain/netgain-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/Netgain/netgain-1/src/views/Create_Process_Form.tsx\";\nimport * as React from \"react\";\nimport { Form, FieldArray, Formik } from \"formik\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Process, Activity } from \"../backend/ts/common_define\";\nimport { save_process_template, does_process_exist } from \"../backend/ts/database\";\nimport { useHistory } from \"react-router\";\nimport { useState } from \"react\";\nimport Activity_Component from \"../components/Activity_Component\";\nconst useStyles = makeStyles(theme => createStyles({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  textField: {\n    margin: theme.spacing(1),\n    width: \"100%\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction InnerForm() {\n  const history = useHistory();\n  const classes = useStyles({});\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        submitDialogOpen = _useState2[0],\n        setSubmitDialogOpen = _useState2[1];\n\n  const handleClose = (answer, values) => {\n    setSubmitDialogOpen(false);\n\n    if (answer === true) {\n      submitProcess(values);\n    }\n  };\n\n  const submitProcess = values => {\n    save_process_template(values);\n    console.log(values);\n    history.push(\"/View_Process_Templates\");\n  };\n\n  let initVals = new Process();\n  initVals.activities.push(new Activity());\n  return React.createElement(Formik, {\n    initialValues: initVals,\n    onSubmit: (values, actions) => {\n      console.log(values);\n      does_process_exist(values.title).then(does_exist => {\n        if (does_exist) setSubmitDialogOpen(true);else submitProcess(values);\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, formikProps => React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    name: \"title\",\n    className: classes.textField,\n    label: \"Process Title\",\n    margin: \"normal\",\n    variant: \"outlined\",\n    autoComplete: \"off\",\n    type: \"text\",\n    required: true,\n    onChange: formikProps.handleChange,\n    onBlur: formikProps.handleBlur,\n    value: formikProps.values.title.length === 1 ? formikProps.values.title.toUpperCase() : formikProps.values.title,\n    inputProps: {\n      style: {\n        fontSize: 30\n      }\n    },\n    InputLabelProps: {\n      style: {\n        fontSize: 30\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    name: \"description\",\n    id: \"outlined-basic\",\n    className: classes.textField,\n    label: \"Description\",\n    margin: \"normal\",\n    multiline: true,\n    rows: \"3\",\n    variant: \"outlined\",\n    type: \"text\",\n    onChange: formikProps.handleChange,\n    onBlur: formikProps.handleBlur,\n    value: formikProps.values.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }))), React.createElement(FieldArray, {\n    name: \"activities\",\n    render: helpers => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, formikProps.values.activities && formikProps.values.activities.length > 0 ? formikProps.values.activities.map((activity, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Activity_Component, {\n      prefix: \"activities.\".concat(index, \".\"),\n      activity: activity,\n      index: index,\n      classes: classes,\n      amountOfActivities: formikProps.values.activities.length,\n      arrayHelpers: helpers,\n      formikProps: formikProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }))) : null, React.createElement(Grid, {\n      justify: \"center\",\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(AlreadyExistDialog, {\n      handleClose: handleClose,\n      values: formikProps.values,\n      submitDialogOpen: submitDialogOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      className: classes.button,\n      type: \"submit\",\n      color: \"primary\",\n      disabled: formikProps.isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Save\"))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })));\n}\n\nfunction AlreadyExistDialog({\n  submitDialogOpen,\n  handleClose,\n  values\n}) {\n  return React.createElement(Dialog, {\n    open: submitDialogOpen,\n    onClose: () => {\n      handleClose(false, values);\n    },\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"A process with this name already exists, do you want to overwrite it?\"), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => {\n      handleClose(false, values);\n    },\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"No\"), React.createElement(Button, {\n    onClick: () => {\n      handleClose(true, values);\n    },\n    color: \"primary\",\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, \"Yes\")));\n}\n\nexport default InnerForm;","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Netgain/netgain-1/src/views/Create_Process_Form.tsx"],"names":["React","Form","FieldArray","Formik","createStyles","makeStyles","TextField","Button","Paper","Grid","Dialog","DialogActions","DialogTitle","Process","Activity","save_process_template","does_process_exist","useHistory","useState","Activity_Component","useStyles","theme","container","display","flexWrap","button","margin","spacing","textField","width","paper","padding","InnerForm","history","classes","submitDialogOpen","setSubmitDialogOpen","handleClose","answer","values","submitProcess","console","log","push","initVals","activities","actions","title","then","does_exist","formikProps","handleChange","handleBlur","length","toUpperCase","style","fontSize","description","helpers","map","activity","index","isSubmitting","AlreadyExistDialog"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { withFormik, FormikProps, Form, FieldArray, Formik } from \"formik\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport { Process, Activity } from \"../backend/ts/common_define\";\nimport {\n  save_process_template,\n  does_process_exist\n} from \"../backend/ts/database\";\nimport { useHistory } from \"react-router\";\nimport { DialogContent, Chip } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport GetJSONModal from \"../components/Get_JSON_Modal\";\nimport Activity_Component from \"../components/Activity_Component\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\ninterface OtherProps {\n  title?: string;\n}\n\ninterface CreateProcessProps {\n  title?: string;\n  description?: string;\n  activities?: Array<Activity>;\n}\n\ninterface AlreadyExistDialog {\n  submitDialogOpen: boolean;\n  values: Process;\n  handleClose(answer: Boolean, values: Process): void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    button: {\n      margin: theme.spacing(1)\n    },\n    textField: {\n      margin: theme.spacing(1),\n      width: \"100%\"\n    },\n    paper: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(1)\n    }\n  })\n);\n\nfunction InnerForm() {\n  const history = useHistory();\n  const classes = useStyles({});\n  const [submitDialogOpen, setSubmitDialogOpen] = useState(false);\n\n  const handleClose = (answer: Boolean, values: Process) => {\n    setSubmitDialogOpen(false);\n    if (answer === true) {\n      submitProcess(values);\n    }\n  };\n\n  const submitProcess = (values: Process) => {\n    save_process_template(values);\n    console.log(values);\n    history.push(\"/View_Process_Templates\");\n  };\n\n  let initVals = new Process();\n  initVals.activities.push(new Activity());\n\n  return (\n    <Formik\n      initialValues={initVals}\n      onSubmit={(values, actions) => {\n        console.log(values);\n        does_process_exist(values.title).then(does_exist => {\n          if (does_exist) setSubmitDialogOpen(true);\n          else submitProcess(values);\n        });\n      }}\n    >\n      {(formikProps: FormikProps<any>) => (\n        <Form>\n          <Paper className={classes.paper}>\n            <Grid container justify=\"center\">\n              <TextField\n                name=\"title\"\n                className={classes.textField}\n                label=\"Process Title\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                autoComplete=\"off\"\n                type=\"text\"\n                required\n                onChange={formikProps.handleChange}\n                onBlur={formikProps.handleBlur}\n                value={\n                  formikProps.values.title.length === 1\n                    ? formikProps.values.title.toUpperCase()\n                    : formikProps.values.title\n                }\n                inputProps={{\n                  style: { fontSize: 30 }\n                }}\n                InputLabelProps={{\n                  style: { fontSize: 30 }\n                }}\n              />\n              <TextField\n                name=\"description\"\n                id=\"outlined-basic\"\n                className={classes.textField}\n                label=\"Description\"\n                margin=\"normal\"\n                multiline\n                rows=\"3\"\n                variant=\"outlined\"\n                type=\"text\"\n                onChange={formikProps.handleChange}\n                onBlur={formikProps.handleBlur}\n                value={formikProps.values.description}\n              />\n            </Grid>\n          </Paper>\n          <FieldArray\n            name=\"activities\"\n            render={helpers => (\n              <div>\n                {formikProps.values.activities &&\n                formikProps.values.activities.length > 0\n                  ? formikProps.values.activities.map(\n                      (activity: Activity, index: number) => (\n                        <div key={index}>\n                          <Activity_Component\n                            prefix={`activities.${index}.`}\n                            activity={activity}\n                            index={index}\n                            classes={classes}\n                            amountOfActivities={\n                              formikProps.values.activities.length\n                            }\n                            arrayHelpers={helpers}\n                            formikProps={formikProps}\n                          />\n                        </div>\n                      )\n                    )\n                  : null}\n                <Grid justify=\"center\" container>\n                  <AlreadyExistDialog\n                    handleClose={handleClose}\n                    values={formikProps.values}\n                    submitDialogOpen={submitDialogOpen}\n                  />\n                  <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    type=\"submit\"\n                    color=\"primary\"\n                    disabled={formikProps.isSubmitting}\n                  >\n                    Save\n                  </Button>\n                </Grid>\n              </div>\n            )}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nfunction AlreadyExistDialog({\n  submitDialogOpen,\n  handleClose,\n  values\n}: AlreadyExistDialog) {\n  return (\n    <Dialog\n      open={submitDialogOpen}\n      onClose={() => {\n        handleClose(false, values);\n      }}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\n          \"A process with this name already exists, do you want to overwrite it?\"\n        }\n      </DialogTitle>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            handleClose(false, values);\n          }}\n          color=\"primary\"\n        >\n          No\n        </Button>\n        <Button\n          onClick={() => {\n            handleClose(true, values);\n          }}\n          color=\"primary\"\n          autoFocus\n        >\n          Yes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default InnerForm;\n"]},"metadata":{},"sourceType":"module"}