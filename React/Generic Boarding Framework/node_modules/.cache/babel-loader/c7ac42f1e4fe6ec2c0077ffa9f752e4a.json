{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/Netgain/netgain-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Get_Process_Info_Modal.tsx\";\nimport React from \"react\";\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { IconButton, makeStyles, createStyles, Popover, Typography } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => createStyles({\n  typography: {\n    padding: theme.spacing(2),\n    maxWidth: 700,\n    wordWrap: \"break-word\"\n  }\n}));\nexport default function SimplePopover({\n  process\n}) {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(null),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        anchorEl = _React$useState2[0],\n        setAnchorEl = _React$useState2[1];\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    \"aria-describedby\": id,\n    color: \"default\",\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(InfoOutlinedIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })), React.createElement(Popover, {\n    id: id,\n    open: open,\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.typography,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Title: \", process.title, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), \"Description: \", process.description, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), \"Author: \", process.author, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), \"Activities: \", process.activities.map((a, index) => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Title: \", a.title, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), \"Description: \", a.description, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), \"Outcome: \", a.possible_states.join(\"/\"), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }))))));\n}","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Get_Process_Info_Modal.tsx"],"names":["React","InfoOutlinedIcon","IconButton","makeStyles","createStyles","Popover","Typography","useStyles","theme","typography","padding","spacing","maxWidth","wordWrap","SimplePopover","process","classes","useState","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","open","Boolean","id","undefined","vertical","horizontal","title","description","author","activities","map","a","index","possible_states","join"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { create_process_instance } from \"../backend/ts/database\";\nimport { Process, Activity } from \"../backend/ts/common_define\";\nimport { Form, Field, Formik, FieldProps } from \"formik\";\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { IconButton, makeStyles, createStyles, Popover, Typography, Theme } from \"@material-ui/core\";\nimport { typography } from \"@material-ui/system\";\n\ninterface Get_Process_Info_Props {\n    process: Process;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    typography: {\n      padding: theme.spacing(2),\n      maxWidth: 700,\n      wordWrap: \"break-word\"\n    },\n  }),\n);\n\nexport default function SimplePopover({process}:Get_Process_Info_Props) {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n  \n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n      setAnchorEl(event.currentTarget);\n    };\n  \n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n  \n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n  \n    return (\n      <div>\n\n        <IconButton\n         aria-describedby={id}\n         color=\"default\"\n         onClick={handleClick}\n       >\n         <InfoOutlinedIcon />\n       </IconButton>\n        <Popover\n          id={id}\n          open={open}\n          anchorEl={anchorEl}\n          onClose={handleClose}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',   \n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n        >\n          <Typography className={classes.typography}>\n              Title: {process.title} <br></br>\n              Description: {process.description} <br></br>\n              Author: {process.author} <br></br> <br></br>\n              Activities: {process.activities.map((a, index) => \n                <div>\n                  Title: {a.title}<br />\n                  Description: {a.description} <br />\n                  Outcome: {a.possible_states.join(\"/\")} <br />\n                  <br />\n                </div>)}\n           </Typography>\n        </Popover>\n      </div>\n    );\n  }"]},"metadata":{},"sourceType":"module"}