{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/Netgain/netgain-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/Netgain/netgain-1/src/views/Create_Process_Form.tsx\";\nimport * as React from \"react\";\nimport { Form, FieldArray, Formik } from \"formik\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport { Process, Activity } from \"../backend/ts/common_define\";\nimport { save_process_template, does_process_exist } from \"../backend/ts/database\";\nimport { useHistory } from \"react-router\";\nimport { Chip } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport GetJSONModal from \"../components/Get_JSON_Modal\";\nconst useStyles = makeStyles(theme => createStyles({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  textField: {\n    margin: theme.spacing(1),\n    width: \"100%\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction InnerForm() {\n  const history = useHistory();\n  const classes = useStyles({});\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        submitDialogOpen = _useState2[0],\n        setSubmitDialogOpen = _useState2[1];\n\n  const handleClose = (answer, values) => {\n    setSubmitDialogOpen(false);\n\n    if (answer === true) {\n      submitProcess(values);\n    }\n  };\n\n  const submitProcess = values => {\n    save_process_template(values);\n    console.log(values);\n    history.push(\"/View_Process_Templates\");\n  };\n\n  let initVals = new Process();\n  initVals.activities.push(new Activity());\n  return React.createElement(Formik, {\n    initialValues: initVals,\n    onSubmit: (values, actions) => {\n      console.log(values);\n      does_process_exist(values.title).then(does_exist => {\n        if (does_exist) setSubmitDialogOpen(true);else submitProcess(values);\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, ({\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    name: \"title\",\n    className: classes.textField,\n    label: \"Process Title\",\n    margin: \"normal\",\n    variant: \"outlined\",\n    autoComplete: \"off\",\n    type: \"text\",\n    required: true,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.title.length === 1 ? values.title.toUpperCase() : values.title,\n    inputProps: {\n      style: {\n        fontSize: 30\n      }\n    },\n    InputLabelProps: {\n      style: {\n        fontSize: 30\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    name: \"description\",\n    id: \"outlined-basic\",\n    className: classes.textField,\n    label: \"Description\",\n    margin: \"normal\",\n    multiline: true,\n    rows: \"3\",\n    variant: \"outlined\",\n    type: \"text\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }))), React.createElement(FieldArray, {\n    name: \"activities\",\n    render: helpers => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, values.activities && values.activities.length > 0 ? values.activities.map((activity, index) => React.createElement(Paper, {\n      className: classes.paper,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      autoComplete: \"off\",\n      name: \"activities.\".concat(index, \".title\"),\n      className: classes.textField,\n      label: \"Activity Title\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      type: \"text\",\n      required: true,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: activity.title.length === 1 ? activity.title.toUpperCase() : activity.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      name: \"activities.\".concat(index, \".description\"),\n      id: \"outlined-basic\",\n      className: classes.textField,\n      label: \"Description\",\n      margin: \"normal\",\n      multiline: true,\n      rows: \"3\",\n      variant: \"outlined\",\n      type: \"text\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: activity.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(Autocomplete, {\n      multiple: true,\n      freeSolo: true,\n      onChange: (_, val) => helpers.form.setFieldValue(\"activities.\".concat(index, \".possible_states\"), val),\n      defaultValue: [\"Done\", \"Not Possible\"],\n      onBlur: handleBlur,\n      className: classes.textField,\n      renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n        variant: \"outlined\",\n        label: option\n      }, getTagProps({\n        index\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }))),\n      renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n        onKeyPress: e => {\n          //disable submit on enter as enter is used to create chips\n          if (e.key === \"Enter\") e.preventDefault();\n        },\n        fullWidth: true,\n        name: \"activities.\".concat(index, \".possible_states\"),\n        label: \"Possible States\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      style: {\n        flexGrow: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(GetJSONModal, {\n      fieldName: \"activities.\".concat(index, \".automationSettings\"),\n      setFunc: helpers.form.setFieldValue,\n      btnClass: classes.button,\n      startText: Object.keys(activity.automationSettings).length === 0 && activity.automationSettings.constructor === Object ? \"\" : JSON.stringify(activity.automationSettings, undefined, 4),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: classes.button,\n      \"aria-label\": \"add\",\n      color: \"default\",\n      onClick: () => helpers.push(new Activity()),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(AddIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    })), React.createElement(IconButton, {\n      className: classes.button,\n      disabled: values.activities.length < 2,\n      \"aria-label\": \"remove\",\n      color: \"default\",\n      onClick: () => helpers.remove(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(RemoveIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }))))) : null, React.createElement(Grid, {\n      justify: \"center\",\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(Dialog, {\n      open: submitDialogOpen,\n      onClose: () => {\n        handleClose(false, values);\n      },\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"alert-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"A process with this name already exists, do you want to overwrite it?\"), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => {\n        handleClose(false, values);\n      },\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      onClick: () => {\n        handleClose(true, values);\n      },\n      color: \"primary\",\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Button, {\n      variant: \"contained\",\n      className: classes.button,\n      type: \"submit\",\n      color: \"primary\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Save\"))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })));\n}\n\nexport default InnerForm;","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Netgain/netgain-1/src/views/Create_Process_Form.tsx"],"names":["React","Form","FieldArray","Formik","createStyles","makeStyles","TextField","Button","Paper","Grid","Dialog","DialogActions","DialogTitle","IconButton","AddIcon","Autocomplete","RemoveIcon","Process","Activity","save_process_template","does_process_exist","useHistory","Chip","useState","GetJSONModal","useStyles","theme","container","display","flexWrap","button","margin","spacing","textField","width","paper","padding","InnerForm","history","classes","submitDialogOpen","setSubmitDialogOpen","handleClose","answer","values","submitProcess","console","log","push","initVals","activities","actions","title","then","does_exist","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","length","toUpperCase","style","fontSize","description","helpers","map","activity","index","_","val","form","setFieldValue","value","getTagProps","option","params","e","key","preventDefault","flexGrow","Object","keys","automationSettings","constructor","JSON","stringify","undefined","remove"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { withFormik, FormikProps, Form, FieldArray, Formik } from \"formik\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport { Process, Activity } from \"../backend/ts/common_define\";\nimport {\n  save_process_template,\n  does_process_exist\n} from \"../backend/ts/database\";\nimport { useHistory } from \"react-router\";\nimport { DialogContent, Chip } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport GetJSONModal from \"../components/Get_JSON_Modal\";\ninterface OtherProps {\n  title?: string;\n}\n\ninterface CreateProcessProps {\n  title?: string;\n  description?: string;\n  activities?: Array<Activity>;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    button: {\n      margin: theme.spacing(1)\n    },\n    textField: {\n      margin: theme.spacing(1),\n      width: \"100%\"\n    },\n    paper: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(1)\n    }\n  })\n);\n\nfunction InnerForm() {\n  const history = useHistory();\n  const classes = useStyles({});\n  const [submitDialogOpen, setSubmitDialogOpen] = useState(false);\n\n  const handleClose = (answer: Boolean, values: Process) => {\n    setSubmitDialogOpen(false);\n    if (answer === true) {\n      submitProcess(values);\n    }\n  };\n\n  const submitProcess = (values: Process) => {\n    save_process_template(values);\n    console.log(values);\n    history.push(\"/View_Process_Templates\");\n  };\n  let initVals = new Process();\n  initVals.activities.push(new Activity());\n  return (\n    <Formik\n      initialValues={initVals}\n      onSubmit={(values, actions) => {\n        console.log(values);\n        does_process_exist(values.title).then(does_exist => {\n          if (does_exist) setSubmitDialogOpen(true);\n          else submitProcess(values);\n        });\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting\n      }) => (\n        <Form>\n          <Paper className={classes.paper}>\n            <Grid container justify=\"center\">\n              <TextField\n                name=\"title\"\n                className={classes.textField}\n                label=\"Process Title\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                autoComplete=\"off\"\n                type=\"text\"\n                required\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={\n                  values.title.length === 1\n                    ? values.title.toUpperCase()\n                    : values.title\n                }\n                inputProps={{\n                  style: { fontSize: 30 }\n                }}\n                InputLabelProps={{\n                  style: { fontSize: 30 }\n                }}\n              />\n              <TextField\n                name=\"description\"\n                id=\"outlined-basic\"\n                className={classes.textField}\n                label=\"Description\"\n                margin=\"normal\"\n                multiline\n                rows=\"3\"\n                variant=\"outlined\"\n                type=\"text\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.description}\n              />\n            </Grid>\n          </Paper>\n          <FieldArray\n            name=\"activities\"\n            render={helpers => (\n              <div>\n                {values.activities && values.activities.length > 0\n                  ? values.activities.map((activity, index) => (\n                      <Paper className={classes.paper} key={index}>\n                        <Grid container justify=\"center\">\n                          <TextField\n                            autoComplete=\"off\"\n                            name={`activities.${index}.title`}\n                            className={classes.textField}\n                            label=\"Activity Title\"\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            type=\"text\"\n                            required\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={\n                              activity.title.length === 1\n                                ? activity.title.toUpperCase()\n                                : activity.title\n                            }\n                          />\n                          <TextField\n                            name={`activities.${index}.description`}\n                            id=\"outlined-basic\"\n                            className={classes.textField}\n                            label=\"Description\"\n                            margin=\"normal\"\n                            multiline\n                            rows=\"3\"\n                            variant=\"outlined\"\n                            type=\"text\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={activity.description}\n                          />\n                          <Autocomplete\n                            multiple\n                            freeSolo\n                            onChange={(_, val) =>\n                              helpers.form.setFieldValue(\n                                `activities.${index}.possible_states`,\n                                val\n                              )\n                            }\n                            defaultValue={[\"Done\", \"Not Possible\"]}\n                            onBlur={handleBlur}\n                            className={classes.textField}\n                            renderTags={(value: string[], getTagProps) =>\n                              value.map((option: string, index: number) => (\n                                <Chip\n                                  variant=\"outlined\"\n                                  label={option}\n                                  {...getTagProps({ index })}\n                                />\n                              ))\n                            }\n                            renderInput={params => (\n                              <TextField\n                                {...params}\n                                onKeyPress={e => {\n                                  //disable submit on enter as enter is used to create chips\n                                  if (e.key === \"Enter\") e.preventDefault();\n                                }}\n                                fullWidth\n                                name={`activities.${index}.possible_states`}\n                                label=\"Possible States\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                type=\"text\"\n                              />\n                            )}\n                          />\n                          <Grid\n                            container\n                            justify=\"center\"\n                            style={{ flexGrow: 1 }}\n                          >\n                            <Grid item xs>\n                              <GetJSONModal\n                                fieldName={`activities.${index}.automationSettings`}\n                                setFunc={helpers.form.setFieldValue}\n                                btnClass={classes.button}\n                                startText={\n                                  Object.keys(activity.automationSettings)\n                                    .length === 0 &&\n                                  activity.automationSettings.constructor ===\n                                    Object\n                                    ? \"\"\n                                    : JSON.stringify(\n                                        activity.automationSettings,\n                                        undefined,\n                                        4\n                                      )\n                                }\n                              />\n                            </Grid>\n\n                            <Grid item xs>\n                              <Grid container justify=\"center\">\n                                <IconButton\n                                  className={classes.button}\n                                  aria-label=\"add\"\n                                  color=\"default\"\n                                  onClick={() => helpers.push(new Activity())}\n                                >\n                                  <AddIcon />\n                                </IconButton>\n                                <IconButton\n                                  className={classes.button}\n                                  disabled={values.activities.length < 2}\n                                  aria-label=\"remove\"\n                                  color=\"default\"\n                                  onClick={() => helpers.remove(index)}\n                                >\n                                  <RemoveIcon />\n                                </IconButton>\n                              </Grid>\n                            </Grid>\n\n                            <Grid item xs></Grid>\n                          </Grid>\n                        </Grid>\n                      </Paper>\n                    ))\n                  : null}\n                <Grid justify=\"center\" container>\n                  <Dialog\n                    open={submitDialogOpen}\n                    onClose={() => {\n                      handleClose(false, values);\n                    }}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                  >\n                    <DialogTitle id=\"alert-dialog-title\">\n                      {\n                        \"A process with this name already exists, do you want to overwrite it?\"\n                      }\n                    </DialogTitle>\n                    <DialogActions>\n                      <Button\n                        onClick={() => {\n                          handleClose(false, values);\n                        }}\n                        color=\"primary\"\n                      >\n                        No\n                      </Button>\n                      <Button\n                        onClick={() => {\n                          handleClose(true, values);\n                        }}\n                        color=\"primary\"\n                        autoFocus\n                      >\n                        Yes\n                      </Button>\n                    </DialogActions>\n                  </Dialog>\n                  <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    type=\"submit\"\n                    color=\"primary\"\n                    disabled={isSubmitting}\n                  >\n                    Save\n                  </Button>\n                </Grid>\n              </div>\n            )}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default InnerForm;\n"]},"metadata":{},"sourceType":"module"}