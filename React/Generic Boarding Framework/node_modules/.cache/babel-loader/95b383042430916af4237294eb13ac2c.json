{"ast":null,"code":"import _slicedToArray from \"/Users/elgstrom/Desktop/Netgain/netgain-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Get_JSON_Modal.tsx\";\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Form, Field, Formik } from \"formik\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { IconButton } from \"@material-ui/core\";\nexport default function Get_JSON_Modal(modalProps) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    className: modalProps.btnClass,\n    \"aria-label\": \"advanced settings\",\n    color: \"default\",\n    onClick: handleClickOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(SettingsIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), React.createElement(Dialog, {\n    maxWidth: \"xl\",\n    fullWidth: true,\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Automation JSON\"), React.createElement(Formik, {\n    validate: vals => {\n      let errors = {};\n\n      try {\n        let jsonObj = JSON.parse(vals.json);\n        vals.json = JSON.stringify(jsonObj, undefined, 4);\n      } catch (e) {\n        errors = {\n          json: \"invalid JSON\"\n        };\n      }\n\n      return errors;\n    },\n    initialValues: {\n      json: modalProps.startText\n    },\n    onSubmit: (values, actions) => {\n      setOpen(false);\n      modalProps.setFunc(modalProps.fieldName, JSON.parse(values.json));\n      actions.setSubmitting(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, props => React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"json\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, ({\n    field,\n    form,\n    meta\n  }) => React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    multiline: true,\n    error: !!(props.touched.json && props.errors.json),\n    helperText: props.errors.json,\n    rows: 20,\n    autoComplete: \"off\",\n    style: {\n      width: \"100%\"\n    },\n    type: \"text\",\n    label: \"JSON\"\n  }, field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"save\"))))));\n}","map":{"version":3,"sources":["/Users/elgstrom/Desktop/Netgain/netgain-1/src/components/Get_JSON_Modal.tsx"],"names":["React","Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","Form","Field","Formik","SettingsIcon","IconButton","Get_JSON_Modal","modalProps","useState","open","setOpen","handleClickOpen","handleClose","btnClass","vals","errors","jsonObj","JSON","parse","json","stringify","undefined","e","startText","values","actions","setFunc","fieldName","setSubmitting","props","field","form","meta","touched","width"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { create_process_instance } from \"../backend/ts/database\";\nimport { Process } from \"../backend/ts/common_define\";\nimport { Form, Field, Formik, FieldProps } from \"formik\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { IconButton } from \"@material-ui/core\";\n\ninterface Get_JSON_Modal_Props {\n  btnClass: any;\n  setFunc: any;\n\tfieldName: string;\n\tstartText: string;\n}\n\nexport default function Get_JSON_Modal(modalProps: Get_JSON_Modal_Props) {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      {/* //TODO  make this more general\n                eg get the what button should be from outside this component\n            */}\n      <IconButton\n        className={modalProps.btnClass}\n        aria-label=\"advanced settings\"\n        color=\"default\"\n        onClick={handleClickOpen}\n      >\n        <SettingsIcon />\n      </IconButton>\n      <Dialog\n        maxWidth=\"xl\"\n        fullWidth\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Automation JSON</DialogTitle>\n        <Formik\n          validate={vals => {\n            let errors = {};\n            try {\n              let jsonObj = JSON.parse(vals.json);\n              vals.json = JSON.stringify(jsonObj, undefined, 4);\n            } catch (e) {\n              errors = { json: \"invalid JSON\" };\n            }\n            return errors;\n          }}\n          initialValues={{ json: modalProps.startText }}\n          onSubmit={(values, actions) => {\n            setOpen(false);\n            modalProps.setFunc(modalProps.fieldName, JSON.parse(values.json));\n            actions.setSubmitting(false);\n          }}\n        >\n          {props => (\n            <Form>\n              <DialogContent>\n                <Field name=\"json\">\n                  {({ field, form, meta }: FieldProps) => (\n                    <TextField\n                      variant=\"outlined\"\n                      multiline\n                      error={!!(props.touched.json && props.errors.json)}\n                      helperText={props.errors.json}\n                      rows={20}\n                      autoComplete=\"off\"\n                      style={{ width: \"100%\" }}\n                      type=\"text\"\n                      label=\"JSON\"\n                      {...field}\n                    />\n                  )}\n                </Field>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\" color=\"primary\">\n                  save\n                </Button>\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}